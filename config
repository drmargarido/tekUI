
#------------------------------------------------------------------------------
# Platform to build against [Choices: posix, winnt]:
#------------------------------------------------------------------------------

PLATFORM ?= posix

#------------------------------------------------------------------------------
# Dynamic link library extension [Choices: .so, .dll]:
#------------------------------------------------------------------------------

DLLEXT = .so

#------------------------------------------------------------------------------
# Default display driver [Choices: x11, rawfb, directfb, windows]:
# If you enable rawfb, see RAWFB_SUB_DEVICE below and visit src/Makefile
# and tek/lib/Makefile if you want to enable a sub driver.
#------------------------------------------------------------------------------

DISPLAY_DRIVER ?= x11

#------------------------------------------------------------------------------
# tekUI features:
# ENABLE_GRADIENT - enable color gradients
# ENABLE_PIXMAP_CACHE - enable caching of pixmaps
# ENABLE_PNG - enable PNG support through libpng
# ENABLE_FILENO - dispatches lines from a fd (normally stdin) to MSG_USER
# ENABLE_DGRAM=portnr - enables a datagram server on addr:portnr for MSG_USER
# ENABLE_DGRAM_ADDR=\"addr\" - set address to listen on (default 127.0.0.1)
#------------------------------------------------------------------------------

TEKUI_DEFS = -DENABLE_GRADIENT -DENABLE_PIXMAP_CACHE 
# TEKUI_DEFS += -DENABLE_FILENO -DENABLE_DGRAM=20000
# TEKUI_DEFS += -DENABLE_PNG
# TEKUI_LIBS = -lpng

#------------------------------------------------------------------------------
# Compiler configuration:
# Comment in TSYS_POSIX if your platform is not listed in include/tek/config.h
#------------------------------------------------------------------------------

# CROSS_COMPILE =
CC = $(CROSS_COMPILE)gcc -fpic # -DTSYS_POSIX

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# For Windows using MinGW:
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# CC = $(CROSS_COMPILE)gcc -DWIN32

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Cross-build using MinGW:
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# CROSS_COMPILE = i586-mingw32-

#------------------------------------------------------------------------------
# Platform libraries:
#------------------------------------------------------------------------------

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# POSIX:
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

PLATFORM_LIBS = -pthread

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Windows:
# (Assuming that lua51.dll is in the top-level directory of the distribution)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# PLATFORM_LIBS = -lmsvcrt -lkernel32 -lwinmm -luser32 -lshell32 -ladvapi32
# LUA_LIBS = -L $(BASEDIR) -llua51

#------------------------------------------------------------------------------
# Installation and system paths:
# (Installation is not always required, e.g. x11 and windows can do without)
#------------------------------------------------------------------------------

PREFIX ?= /usr/local
LUAVER ?= 5.1
LUA_LIB = $(PREFIX)/lib/lua/$(LUAVER)
LUA_SHARE = $(PREFIX)/share/lua/$(LUAVER)
SYS_LUA_LIB = $(PREFIX)/lib/lua/$(LUAVER)
SYS_LUA_SHARE = $(PREFIX)/share/lua/$(LUAVER)

#------------------------------------------------------------------------------
# Other libraries:
#------------------------------------------------------------------------------

LUA_DEFS = -I$(PREFIX)/include -I/usr/local/include/lua51 -I/usr/include/lua5.1

FREETYPE_LIBS = -L$(PREFIX)/lib -lfreetype
FREETYPE_DEFS = -I$(PREFIX)/include -I$(PREFIX)/include/freetype2 -I/usr/include/freetype2 -I/usr/X11R6/include/freetype2 -I/usr/X11/include/

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# X11 defines and libraries:
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

X11_LIBS = -L/usr/X11R6/lib -lX11 -lXext -lXxf86vm
X11_DEFS = -I/usr/X11R6/include $(FREETYPE_DEFS) -DX11_PIXMAP_CACHE -DENABLE_XFT -DENABLE_XVID

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Raw framebuffer: Can be visualized on a Linux framebuffer, on another
# display driver, via VNC server, or any combination thereof.
# ENABLE_LINUXFB - enable Linux framebuffer and Linux event interface
# DEF_FONTDIR - default TTF font directory
# RFBPIXFMT - enforce framebuffer pixel format
# ENABLE_WINBACKBUFFER - enable window backing store
# ENABLE_BACKBUFFER - use a global backbuffer even if not strictly required
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

RAWFB_LIBS = $(FREETYPE_LIBS) $(RAWFB_SUB_LIBS) $(VNCSERVER_LIBS) $(TEKUI_LIBS)
RAWFB_DEFS = $(FREETYPE_DEFS) $(RAWFB_SUB_DEFS) $(VNCSERVER_DEFS) -DRFB_PIXMAP_CACHE 

# RAWFB_DEFS += -DDEF_FONTDIR=\"$(SYS_LUA_SHARE)/tek/ui/font\"
# RAWFB_DEFS += -DRFBPIXFMT=TVPIXFMT_R5G6B5 
# RAWFB_DEFS += -DENABLE_WINBACKBUFFER # -DENABLE_BACKBUFFER

# Linux framebuffer support:
RAWFB_DEFS += -DENABLE_LINUXFB

# Redirect output to a different display driver:
# RAWFB_SUB_LIBS = -ldisplay_x11 $(X11_LIBS)
# RAWFB_SUB_DEFS = -DRFB_SUB_DEVICE=x11

# VNC support:
# VNCSERVER_LIBS = -L$(PREFIX)/lib -lvncserver
# VNCSERVER_DEFS = -DENABLE_VNCSERVER -I$(PREFIX)/include -DENABLE_VNCSERVER_COPYRECT # -DRFBPIXFMT=TVPIXFMT_0B5G5R5

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# DirectFB defines and libraries:
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

DIRECTFB_LIBS = `pkg-config --libs directfb`
DIRECTFB_DEFS = $(FREETYPE_DEFS) `pkg-config --cflags directfb`

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Windows defines and libraries:
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

WIN_LIBS = $(PLATFORM_LIBS) -lgdi32

#------------------------------------------------------------------------------
# Build paths:
#------------------------------------------------------------------------------

BASEDIR ?= .
INCDIR = $(BASEDIR)/include
LIBDIR = $(BASEDIR)/lib/$(PLATFORM)
OBJDIR = build/$(PLATFORM)
BINDIR = $(BASEDIR)/bin
MODDIR = $(BINDIR)/mod
LUADISTDIR = $(BASEDIR)/../lua-5.1.5

#------------------------------------------------------------------------------
# Compiler flags:
#------------------------------------------------------------------------------

# DEBUG = -g -DTDEBUG=5
WARN = -Wall -Wextra -Wno-unused-parameter -Wno-unused-function -Wno-long-long
OPT = -O2 -fno-strict-aliasing
INCL = -I. -Iinclude -I$(INCDIR)
LIBCFLAGS = $(DEBUG) $(WARN) $(OPT) $(INCL) $(EXTRADEFS)
MODCFLAGS = -shared -L $(LIBDIR)
# For Mac OS X:
# MODCFLAGS = -bundle -undefined dynamic_lookup -L $(LIBDIR)
BINCFLAGS = $(DEBUG) $(WARN) $(OPT) $(INCL) $(EXTRADEFS)
# for compilation of Lua code:
LUAARCH = -m64 # -m32 for 32bit, -m64 for 64bit architecture

#------------------------------------------------------------------------------
# Build tools:
#------------------------------------------------------------------------------

AR = $(CROSS_COMPILE)ar rcu
RM = rm
RMDIR = rm -r
MKDIR = mkdir -p
ECHO = echo
INSTALL_B = install
INSTALL_F = install
INSTALL_D = install -d
INSTALL_S = install -s

#------------------------------------------------------------------------------
# Predefined targets:
#------------------------------------------------------------------------------

default-help:
	@echo "==============================================================================="
	@echo "Default build targets:"
	@echo "-------------------------------------------------------------------------------"
	@echo "all ..................... build everything that is needed"
	@echo "libs .................... build libraries"
	@echo "modules ................. build shared objects"
#	@echo "tools ................... build executables"
	@echo "install ................. install modules globally"
	@echo "clean ................... delete temporary files"
	@echo "help .................... show these and all extra targets for this Makefile"
	@echo "==============================================================================="

FORCE:

$(BINDIR):
	-$(MKDIR) $@
$(MODDIR):
	-$(MKDIR) $@
$(LIBDIR):
	-$(MKDIR) $@
$(OBJDIR):
	-$(MKDIR) $@
